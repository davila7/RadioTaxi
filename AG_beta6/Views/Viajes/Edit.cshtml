@model DataLayer6.Viaje

@{
    ViewBag.Title = "Edit";
}

<h2>Editar Viaje</h2>
<div class="row">
    <div class="col-md-12">
        <div class="col-md-6">

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>Viaje</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id_viaje)

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Pasajero">Pasajero</label>
                        <div class="col-md-10">
                            @Html.DropDownList("IdPasajero", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.IdPasajero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Origen, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Origen, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Origen, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Destino, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Destino, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Destino, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Km, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @{ Html.EnableClientValidation(false); }
                            @Html.EditorFor(model => model.Km, new { htmlAttributes = new { @class = "form-control" } })
                            @{ Html.EnableClientValidation(true); }
                            @Html.ValidationMessageFor(model => model.Km, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Valor, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Valor, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Valor, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Pasajero">Inicio</label>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.FechaInicio, "{0:yyyy-MM-dd}", new { @class = "form-control datetimepicker" })
                            @Html.ValidationMessageFor(model => model.FechaInicio, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Pasajero">Hora Inicio</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HoraIni, new { htmlAttributes = new { @class = "form-control timepicker" } })
                            @Html.ValidationMessageFor(model => model.HoraIni, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Pasajero">Termino</label>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.FechaTermino, "{0:yyyy-MM-dd}", new { @class = "form-control datetimepicker" })
                            @Html.ValidationMessageFor(model => model.FechaTermino, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Pasajero">Hora Termino</label>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.HoraTer, new { htmlAttributes = new { @class = "form-control timepicker" } })
                            @Html.ValidationMessageFor(model => model.HoraTer, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Conductor">Conductor</label>
                        <div class="col-md-10">
                            @Html.DropDownList("RutConductor", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.RutConductor, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2" for="Conductor">Estado</label>
                        <div class="col-md-10">
                            @Html.DropDownList("IdEstado", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.IdEstado, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.Latitud_des)
                    @Html.HiddenFor(model => model.Longitud_des)
                    @Html.HiddenFor(model => model.Latitud_ori)
                    @Html.HiddenFor(model => model.Longitud_ori)
                    @Html.HiddenFor(model => model.Valor_bndra)
                    @Html.HiddenFor(model => model.Valor_mts)

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>

            }
        </div>
        <div class="col-md-6">
            <div class="panel panel-primary">
                <div class="panel-heading">Mapa del Viaje</div>
                <div class="panel-body">
                    <div id="map" style="height:300px; width:430px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    @Html.ActionLink("Volver a la lista", "Index")
</div>
<script>
    $(function () {
        $('#IdPasajero').change(function (e) {
            cargaValor()
        });

    });

    function cargaValor() {
        var jsonObject = {
            "IdPasajero" : $("#IdPasajero").val()
        };

        $.ajax({
            url: "@Url.Action("GetValorTarifa")",
            type: "POST",
        data: JSON.stringify(jsonObject),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        error: function (response) {
            alert(response.responseText);
        },
        success: function (response) {
            valor_bndra = response[0];
            valor_mts = response[1];
            $('#Valor_bndra').val(valor_bndra);
            $('#Valor_mts').val(valor_mts);
        }
    });
    }


    function initMap() {
        var origin_place_id = null;
        var destination_place_id = null;
        var travel_mode = google.maps.TravelMode.DRIVING;
        var map = new google.maps.Map(document.getElementById('map'), {
            mapTypeControl: false,
            center: { lat: -33.450941, lng: -70.662111 },
            zoom: 11
        });
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        directionsDisplay.setMap(map);

        var origin_input = document.getElementById('Origen');
        var destination_input = document.getElementById('Destino');
        

        var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
        origin_autocomplete.bindTo('bounds', map);
        var destination_autocomplete =
            new google.maps.places.Autocomplete(destination_input);
        destination_autocomplete.bindTo('bounds', map);


        var place_origin = $('#Origen').val();
        var place_destino = $('#Destino').val();
        routeLoad(place_origin, place_destino, travel_mode,
              directionsService, directionsDisplay);

       

        function expandViewportToFitPlace(map, place) {
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
        }

        var lat_des = 0;
        var lng_des = 0;
        var lat_ori = 0;
        var lng_ori = 0;

        origin_autocomplete.addListener('place_changed', function () {
            var place = origin_autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            expandViewportToFitPlace(map, place);

            lat_ori = place.geometry.location.lat();
            lng_ori = place.geometry.location.lng();
            $('#Latitud_des').val(lat_ori);
            $('#Longitud_des').val(lng_ori);

            // If the place has a geometry, store its place ID and route if we have
            // the other place ID
            origin_place_id = place.place_id;
            route(origin_place_id, destination_place_id, travel_mode,
                  directionsService, directionsDisplay);
        });

        destination_autocomplete.addListener('place_changed', function () {
            var place = destination_autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            expandViewportToFitPlace(map, place);
            lat_des = place.geometry.location.lat();
            lng_des = place.geometry.location.lng();
            $('#Latitud_ori').val(lat_des);
            $('#Longitud_ori').val(lng_des);

            // If the place has a geometry, store its place ID and route if we have
            // the other place ID
            destination_place_id = place.place_id;
            route(origin_place_id, destination_place_id, travel_mode,
                  directionsService, directionsDisplay);

            var p1 = new google.maps.LatLng(lat_des, lng_des);
            var p2 = new google.maps.LatLng(lat_ori, lng_ori);
            console.log(p1);
            console.log(p2);
            $('#Km').val(calcDistance(p1, p2));

            //console.log($('#valor_bndra').val())
            // console.log($('#valor_mts').val())
            // console.log($('#Km').val())
            valor = parseInt($('#Valor_bndra').val()) + (parseInt($('#Valor_mts').val()) * Math.round(parseFloat($('#Km').val().replace(/\,/g, '.'))));
            console.log(valor)
            //valor_cobrar = parseInt(($('#valor_bndra').val()) + ();
            $('#Valor').val(valor);
        });

        function route(origin_place_id, destination_place_id, travel_mode,
                       directionsService, directionsDisplay) {
            if (!origin_place_id || !destination_place_id) {
                return;
            }
            directionsService.route({
                origin: { 'placeId': origin_place_id },
                destination: { 'placeId': destination_place_id },
                travelMode: travel_mode
            }, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        function routeLoad(origin_place_id, destination_place_id, travel_mode,
                       directionsService, directionsDisplay) {
            if (!origin_place_id || !destination_place_id) {
                return;
            }
            directionsService.route({
                origin: origin_place_id,
                destination: destination_place_id,
                travelMode: travel_mode
            }, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }
    }

    //calculates distance between two points in km's
    function calcDistance(p1, p2) {
        return (google.maps.geometry.spherical.computeDistanceBetween(p1, p2) / 1000).toFixed(2).toString().replace(/\,/g, '.');
    }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAclk8AuFL14AjTXEX3Jbjxo38qUkJ9ynQ&libraries=places,geometry&callback=initMap"
    async defer></script>
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
